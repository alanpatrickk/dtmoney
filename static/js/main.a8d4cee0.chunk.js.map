{"version":3,"sources":["assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","components/Dashboard/styles.ts","assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransactions.tsx","components/Summary/styles.ts","components/Summary/index.tsx","components/Transactions/styles.ts","components/Transactions/index.tsx","components/Dashboard/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","assets/styles/global.ts","App.tsx","index.tsx"],"names":["Container","styled","header","Content","div","Header","onOpenNewTransactionModal","src","logoImg","alt","type","onClick","main","api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","TransitionApi","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createNewTransaction","useTransactions","useContext","Summary","summary","reduce","acc","incomings","amount","total","outcoming","icomeImg","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","Transactions","map","title","category","DateTimeFormat","id","Dashboard","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","onChange","target","placeholder","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8d4cee0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.c750929b.svg\";","import styled from 'styled-components';\n\nexport const Container = styled.header`\n  background: var(--blue);\n`;\n\nexport const Content = styled.div`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2rem 1rem 10rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  @media (max-width:768px) {\n    justify-content: center;\n    flex-wrap: wrap;\n  padding: 2rem 1rem 7rem;\n  }\n  button { \n    font-size: 1rem;\n    color: #fff;\n    background: var(--blue-light);\n    border: 0;\n    padding: 0 2rem;\n    border-radius: var(--radius);\n    height: 3rem;\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(1.1);\n    }\n\n    @media (max-width:768px) {\n      margin-top: 1.5rem;\n    }\n\n  }\n`;","import logoImg from '../../assets/logo.svg'\nimport { Container, Content } from './styles'\n\ninterface HeaderProps {\n  onOpenNewTransactionModal: () => void;\n}\n\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\n\n  return(\n    <Container>\n      <Content>\n        <img src={logoImg} alt=\"dtmoney\" />\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>\n          Nova transação\n        </button>\n      </Content>\n    </Container>\n  )\n}","import styled from 'styled-components';\n\nexport const Container = styled.main`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2.5rem 1rem;\n`;","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.efc003fe.svg\";","import axios from \"axios\";\n\nconst isDevelopment = process.env.NODE_ENV !== \"production\"\n\nexport const api = axios.create({\n  baseURL: isDevelopment ? \"http://localhost:3000/api\" : \"/api\"\n})","import { createContext, useEffect, useState, useContext, ReactNode } from 'react'\nimport { api } from \"../services/api\";\n\ninterface Transition {\n  id: number;\n  title: string;\n  amount: number;\n  type: string;\n  category: string;\n  createdAt: string;\n}\n\ntype TransitionApi = Omit<Transition, 'id' | 'createdAt'>\n\ninterface TransactionsProviderProps {\n  children: ReactNode\n}\n\ninterface TransactionsContextData {\n  transactions: Transition[];\n  createNewTransaction: (transaction: TransitionApi) => Promise<void>;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n  {} as TransactionsContextData\n);\n\nexport function TransactionsProvider({children}: TransactionsProviderProps) {\n\n  const [transactions, setTransactions] = useState<Transition[]>([]);\n  \n  useEffect(() => {\n    api.get('transactions')\n    .then(response => setTransactions(response.data.transactions))\n  }, []);\n\n  async function createNewTransaction(TransitionApi: TransitionApi) {\n    const response = await api.post('transactions', {\n      ...TransitionApi,\n      createdAt: new Date()\n    })\n    const { transaction } = response.data;\n    setTransactions([\n      ...transactions,\n      transaction\n    ])\n\n  }\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, createNewTransaction }}>\n      {children}\n    </TransactionsContext.Provider>\n  )\n\n}\n\nexport function useTransactions() {\n  const context = useContext(TransactionsContext);\n  return context;\n}","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: stretch;\n  justify-content: space-between;\n  gap: 1.2rem;\n  margin-top: -7rem;\n  @media (max-width:768px) {\n    flex-wrap: wrap;\n    gap: 1rem;\n  }\n  div {\n    flex: 1;\n    background: var(--shape);\n    padding: 1.5rem 2rem;\n    border-radius: var(--radius);\n    color: var(--text-title);\n    @media (max-width:768px) {\n      padding: 1.2rem 1.8rem;\n    }\n    header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n    strong {\n      display: block;\n      margin-top: 1rem;\n      font-size: 2rem;\n      font-weight: 500;\n      line-height: 3rem;\n      @media (max-width:768px) {\n        margin-top: 0;\n      }\n    }\n    &.highlight-background {\n      background: var(--green);\n      color: #fff;\n    }\n  }\n`;","import icomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport totalImg from '../../assets/total.svg';\nimport { useTransactions } from '../../hooks/useTransactions';\n\nimport { Container } from \"./styles\";\n\nexport function Summary() {\n\n  const {transactions} = useTransactions();\n\n  const summary = transactions.reduce((acc, transaction) => {\n    if( transaction.type === 'incoming') {\n      acc.incomings += transaction.amount;\n      acc.total += transaction.amount;\n    } else {\n      acc.outcoming += transaction.amount;\n      acc.total -= transaction.amount;\n    }\n    return acc;\n  }, {\n    incomings: 0,\n    outcoming: 0,\n    total: 0\n  })\n\n  return (\n    <Container>\n      <div>\n        <header>\n          <p>Entradas</p>\n          <img src={icomeImg} alt=\"Entradas\" />\n          </header>\n          <strong>\n            {new Intl.NumberFormat('pt-BR', {\n              style: 'currency',\n              currency: 'BRL'\n            }).format(summary.incomings)}\n          </strong>\n      </div>\n        <div>\n          <header>\n            <p>Saídas</p>\n            <img src={outcomeImg} alt=\"Saídas\" />\n            </header>\n            <strong>\n              -\n              {new Intl.NumberFormat('pt-BR', {\n                style: 'currency',\n                currency: 'BRL'\n              }).format(summary.outcoming)}\n            </strong>\n        </div>\n        <div className=\"highlight-background\">\n          <header>\n            <p>Total</p>\n            <img src={totalImg} alt=\"Total\" />\n            </header>\n            <strong>\n              {new Intl.NumberFormat('pt-BR', {\n                style: 'currency',\n                currency: 'BRL'\n              }).format(summary.total)}\n            </strong>\n        </div>\n    </Container>\n  )\n}","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-top: 4rem;\n  @media (max-width:768px) {\n    margin-top: 2rem;\n  }\n  table { \n    width: 100%;\n    border-spacing: 0 0.5rem;\n    th { \n      color: var(--text-body);\n      font-weight: 400;\n      padding: 1rem 2rem;\n      text-align: left;\n      line-height: 1.5rem;\n      @media (max-width:768px) {\n        display: none;\n      }\n    }\n    td { \n      padding: 1rem 2rem;\n      border: 0;\n      background: var(--shape);\n      border-radius: var(--radius);\n      color: var(--text-body);\n      &:first-child {\n        color: var(--text-title);\n      }\n      &.incoming {\n        color: var(--green);\n      }\n      &.outcoming {\n        color: var(--red);\n      }\n      @media (max-width:768px) {\n        display: flex;\n        flex-direction: collumn;\n        flex-wrap: wrap;\n        padding: .1rem 2rem;\n        border-radius: 0;\n        &:first-child {\n          border-radius: var(--border-radius) var(--border-radius) 0 0;\n          padding-top: 1rem;\n        }\n        &:last-child {\n          border-radius: 0 0 var(--border-radius) var(--border-radius);\n          padding-bottom: 1rem;\n        }\n      }\n    }\n  }\n`;","import { useTransactions } from \"../../hooks/useTransactions\";\n\nimport { Container } from \"./styles\";\n\nexport function Transactions() {\n\n  const {transactions} = useTransactions();\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>Título</th>\n            <th>Valor</th>\n            <th>Categoria</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map(transaction => ( \n            <tr key={transaction.id}>\n              <td>{transaction.title}</td>\n              <td className={transaction.type}>\n                {new Intl.NumberFormat('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL'\n                }).format(transaction.amount)}\n              </td>\n              <td>{transaction.category}</td>\n              <td>\n                {new Intl.DateTimeFormat('pt-BR').format(\n                  new Date(transaction.createdAt)\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Container>\n  )\n}","import { Container } from \"./styles\";\nimport { Summary } from \"../Summary\";\nimport { Transactions } from \"../Transactions\";\n\nexport function Dashboard() {\n  return (\n    <Container>\n      <Summary />\n      <Transactions />\n    </Container>\n  )\n}","export default __webpack_public_path__ + \"static/media/close.3e141cd0.svg\";","import styled from 'styled-components';\nimport { darken, transparentize } from 'polished';\n\nexport const Container = styled.form`\n\n  h2 { \n    color: var(--text-title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n  }\n\n  input, \n  select { \n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    border-radius: var(--radius);\n    border: 1px solid #d7d7d7;\n    background: #e7e9ee;\n    color: var(--text-title);\n    font-weight: 400;\n    font-size: 1rem;\n    &::placeholder {\n      color: var(--text-body);\n    }\n    & + input {\n      margin-top: 1rem;\n    }\n    &:focus {\n      outline: 0;\n      box-shadow: 0 0 10px #d7d7d7;\n    }\n  }\n\n  button[type=\"submit\"] {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    background: var(--green);\n    color: #fff;\n    border-radius: var(--radius);\n    border: 0;\n    font-size: 1rem;\n    margin-top: 1.5rem;\n    transition: filter .2s;\n    &:hover {\n      filter: brightness(.9);\n    }\n  }\n\n`;\n\nexport const TransactionTypeContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  justify-content: space-between;\n  gap: 1rem;\n`\n\ninterface RadioBoxProps {\n  isActive: boolean;\n  activeColor: 'green' | 'red';\n}\n\nconst colors = {\n  green: '#33CC95',\n  red: '#E62E4D'\n}\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n\n  height: 4rem;\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: var(--radius);\n    border: 1px solid #d7d7d7;\n    background: ${(props) => props.isActive \n      ? transparentize(0.9, colors[props.activeColor])\n      : 'transparent'\n    };\n    font-weight: 400;\n    font-size: 1rem;\n    img {\n      width: 20px;\n      height: 20px;\n    }\n    span {\n      margin-left: 1rem;\n      font-size: 1rem;\n      color: var(--text-title);\n    }\n    &:hover {\n      border-color: ${darken(0.1, '#d7d7d7')};\n    }\n\n`","import { FormEvent, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useTransactions } from \"../../hooks/useTransactions\";\n\nimport closeImg from '../../assets/close.svg';\nimport icomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\n\nimport { Container, TransactionTypeContainer, RadioBox } from \"./styles\";\n\ninterface NewTransactionModalProps {\n  isOpen: boolean;\n  onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({isOpen, onRequestClose}: NewTransactionModalProps) {\n\n  const { createNewTransaction } = useTransactions();\n\n  const [title, setTitle] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [category, setCategory] = useState('');\n  const [type, setType] = useState('incoming');\n\n  async function handleCreateNewTransaction(event: FormEvent) {\n    event.preventDefault();\n    await createNewTransaction({\n      title,\n      amount,\n      category,\n      type\n    })\n\n    setTitle('')\n    setAmount(0)\n    setCategory('')\n    setType('incoming')\n    onRequestClose()\n\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      overlayClassName=\"react-modal-overlay\"\n      className=\"react-modal-content\"\n    >\n\n      <button type=\"button\" onClick={onRequestClose} className=\"react-modal-close\">\n        <img src={closeImg} alt=\"Fechar Modal\" />\n      </button>\n\n      <Container onSubmit={handleCreateNewTransaction}>\n        \n        <h2>Cadastrar Transação</h2>\n\n        <input \n          type=\"text\" \n          value={title}\n          onChange={event => setTitle(event.target.value)}\n          placeholder=\"Título\"\n        />\n        \n        <input\n          type=\"number\"\n          placeholder=\"Valor\"\n          value={amount}\n          onChange={event => setAmount(Number(event.target.value))}\n        />\n\n        <TransactionTypeContainer>\n          <RadioBox \n            type=\"button\"\n            isActive={type === 'incoming'}\n            activeColor=\"green\"\n            onClick={() => setType('incoming')}\n          >\n            <img src={icomeImg} alt=\"Entrada\" />\n            <span>Entrada</span>\n          </RadioBox>\n          <RadioBox \n            type=\"button\"\n            isActive={type === 'outcoming'}\n            activeColor=\"red\"\n            onClick={() => setType('outcoming')}\n          >\n            <img src={outcomeImg} alt=\"Saída\" />\n            <span>Saída</span>\n          </RadioBox>\n        </TransactionTypeContainer>\n\n        <select\n          placeholder=\"Categoria\"\n          value={category}\n          onChange={event => setCategory(event.target.value)}\n        >\n          <option value=\"Casa\">Casa</option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n        </select>\n\n        <button type=\"submit\">\n          Cadastrar\n        </button>\n\n      </Container>\n    </Modal>\n  )\n}","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --background: #F0F2F5;\n    --red: #E62E4D;\n    --blue: #5429CC;\n    --blue-light: #6933FF;\n    --green: #33CC95;\n    --text-title: #363F5F;\n    --text-body: #969CB3;\n    --shape: #FFFFFF;\n    --radius: 0.35rem;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html {\n    @media (max-width: 1080px) {\n      font-size: 93.75%;\n    }\n    @media (max-width: 720px) {\n      font-size: 87.5%;\n    }\n  }\n\n  body {\n    background: var(--background);\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, textarea, select, button {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .react-modal-overlay {\n    background: rgba(0, 0, 0, 0.5);\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .react-modal-content {\n    width: 92%;\n    max-width: 576px;\n    background: var(--background);\n    padding: 3rem;\n    position: relative;\n    border-radius: var(--radius);\n    @media (max-width:768px) {\n      padding: 2rem;\n    }\n  }\n  .react-modal-close {\n    position: absolute;\n    right: 1.5rem;\n    top: 1.5rem;\n    border: 0;\n    background: transparent;\n    transition: filter .2s;\n    &:hover {\n      filter: brightness(.8);\n    }\n    @media (max-width:768px) {\n      right: .5rem;\n      top: .5rem;\n    }\n  }\n\n`","import { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Header } from \"./components/Header\";\nimport { Dashboard } from \"./components/Dashboard\";\nimport { NewTransactionModal } from \"./components/NewTransactionModal\";\nimport { TransactionsProvider } from \"./hooks/useTransactions\";\n\nimport { GlobalStyle } from \"./assets/styles/global\";\n\nModal.setAppElement('#root');\n\nexport function App() {\n\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false);\n  }\n\n  return (\n    <TransactionsProvider>\n\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n\n      <Dashboard />\n\n      <NewTransactionModal \n        isOpen={isNewTransactionModalOpen} \n        onRequestClose={handleCloseNewTransactionModal} \n      />\n\n      <GlobalStyle />\n\n    </TransactionsProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createServer, Model } from 'miragejs';\nimport { App } from './App';\n\ncreateServer({\n\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Dev Site',\n          type: 'incoming',\n          category: 'Freela',\n          amount: 8000,\n          createdAt: new Date('2021-10-05 10:00:00'),\n        },\n        {\n          id: 2,\n          title: 'Aluguel',\n          type: 'outcoming',\n          category: 'Casa',\n          amount: 1200,\n          createdAt: new Date('2021-10-09 12:30:00'),\n        },\n      ],\n    })\n  },\n\n  routes() {\n\n    this.namespace = '/api';\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction')\n    })\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody)\n      return schema.create('transaction', data)\n    })\n\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}